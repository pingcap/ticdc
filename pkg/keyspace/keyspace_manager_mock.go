// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/keyspace/keyspace_manager.go

// Package keyspace is a generated GoMock package.
package keyspace

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	keyspacepb "github.com/pingcap/kvproto/pkg/keyspacepb"
	kv "github.com/pingcap/tidb/pkg/kv"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockManager) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockManager)(nil).Close))
}

// GetKeyspaceByID mocks base method.
func (m *MockManager) GetKeyspaceByID(ctx context.Context, keyspaceID uint32) (*keyspacepb.KeyspaceMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyspaceByID", ctx, keyspaceID)
	ret0, _ := ret[0].(*keyspacepb.KeyspaceMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyspaceByID indicates an expected call of GetKeyspaceByID.
func (mr *MockManagerMockRecorder) GetKeyspaceByID(ctx, keyspaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyspaceByID", reflect.TypeOf((*MockManager)(nil).GetKeyspaceByID), ctx, keyspaceID)
}

// GetStorage mocks base method.
func (m *MockManager) GetStorage(keyspace string) (kv.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorage", keyspace)
	ret0, _ := ret[0].(kv.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorage indicates an expected call of GetStorage.
func (mr *MockManagerMockRecorder) GetStorage(keyspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorage", reflect.TypeOf((*MockManager)(nil).GetStorage), keyspace)
}

// LoadKeyspace mocks base method.
func (m *MockManager) LoadKeyspace(ctx context.Context, keyspace string) (*keyspacepb.KeyspaceMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadKeyspace", ctx, keyspace)
	ret0, _ := ret[0].(*keyspacepb.KeyspaceMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadKeyspace indicates an expected call of LoadKeyspace.
func (mr *MockManagerMockRecorder) LoadKeyspace(ctx, keyspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadKeyspace", reflect.TypeOf((*MockManager)(nil).LoadKeyspace), ctx, keyspace)
}
