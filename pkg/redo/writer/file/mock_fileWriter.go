// Code generated by mockery v2.53.4. DO NOT EDIT.

package file

import (
	context "context"

	writer "github.com/pingcap/ticdc/pkg/redo/writer"
	mock "github.com/stretchr/testify/mock"
)

// mockFileWriter is an autogenerated mock type for the fileWriter type
type mockFileWriter struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *mockFileWriter) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with no fields
func (_m *mockFileWriter) Flush() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInputCh provides a mock function with no fields
func (_m *mockFileWriter) GetInputCh() chan writer.RedoEvent {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInputCh")
	}

	var r0 chan writer.RedoEvent
	if rf, ok := ret.Get(0).(func() chan writer.RedoEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan writer.RedoEvent)
		}
	}

	return r0
}

// IsRunning provides a mock function with no fields
func (_m *mockFileWriter) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Run provides a mock function with given fields: ctx
func (_m *mockFileWriter) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncWrite provides a mock function with given fields: event
func (_m *mockFileWriter) SyncWrite(event writer.RedoEvent) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for SyncWrite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(writer.RedoEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockFileWriter creates a new instance of mockFileWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockFileWriter(t interface {
	mock.TestingT
	Cleanup(func())
},
) *mockFileWriter {
	mock := &mockFileWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
