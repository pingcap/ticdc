// Code generated by github.com/tinylib/msgp DO NOT EDIT.

package event

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *InfluenceType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = InfluenceType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z InfluenceType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z InfluenceType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *InfluenceType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = InfluenceType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z InfluenceType) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *InfluencedTables) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "influence-type":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "InfluenceType")
					return
				}
				z.InfluenceType = InfluenceType(zb0002)
			}
		case "tables":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TableIDs")
				return
			}
			if cap(z.TableIDs) >= int(zb0003) {
				z.TableIDs = (z.TableIDs)[:zb0003]
			} else {
				z.TableIDs = make([]int64, zb0003)
			}
			for za0001 := range z.TableIDs {
				z.TableIDs[za0001], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "TableIDs", za0001)
					return
				}
			}
		case "schema":
			z.SchemaID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "SchemaID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *InfluencedTables) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "influence-type"
	err = en.Append(0x83, 0xae, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.InfluenceType))
	if err != nil {
		err = msgp.WrapError(err, "InfluenceType")
		return
	}
	// write "tables"
	err = en.Append(0xa6, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TableIDs)))
	if err != nil {
		err = msgp.WrapError(err, "TableIDs")
		return
	}
	for za0001 := range z.TableIDs {
		err = en.WriteInt64(z.TableIDs[za0001])
		if err != nil {
			err = msgp.WrapError(err, "TableIDs", za0001)
			return
		}
	}
	// write "schema"
	err = en.Append(0xa6, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.SchemaID)
	if err != nil {
		err = msgp.WrapError(err, "SchemaID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *InfluencedTables) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "influence-type"
	o = append(o, 0x83, 0xae, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, int(z.InfluenceType))
	// string "tables"
	o = append(o, 0xa6, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TableIDs)))
	for za0001 := range z.TableIDs {
		o = msgp.AppendInt64(o, z.TableIDs[za0001])
	}
	// string "schema"
	o = append(o, 0xa6, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61)
	o = msgp.AppendInt64(o, z.SchemaID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *InfluencedTables) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "influence-type":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "InfluenceType")
					return
				}
				z.InfluenceType = InfluenceType(zb0002)
			}
		case "tables":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TableIDs")
				return
			}
			if cap(z.TableIDs) >= int(zb0003) {
				z.TableIDs = (z.TableIDs)[:zb0003]
			} else {
				z.TableIDs = make([]int64, zb0003)
			}
			for za0001 := range z.TableIDs {
				z.TableIDs[za0001], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TableIDs", za0001)
					return
				}
			}
		case "schema":
			z.SchemaID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SchemaID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *InfluencedTables) Msgsize() (s int) {
	s = 1 + 15 + msgp.IntSize + 7 + msgp.ArrayHeaderSize + (len(z.TableIDs) * (msgp.Int64Size)) + 7 + msgp.Int64Size
	return
}
