// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/pdutil/api_client.go

// Package pdutil is a generated GoMock package.
package pdutil

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	keyspacepb "github.com/pingcap/kvproto/pkg/keyspacepb"
	heartbeatpb "github.com/pingcap/ticdc/heartbeatpb"
)

// MockPDAPIClient is a mock of PDAPIClient interface.
type MockPDAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockPDAPIClientMockRecorder
}

// MockPDAPIClientMockRecorder is the mock recorder for MockPDAPIClient.
type MockPDAPIClientMockRecorder struct {
	mock *MockPDAPIClient
}

// NewMockPDAPIClient creates a new mock instance.
func NewMockPDAPIClient(ctrl *gomock.Controller) *MockPDAPIClient {
	mock := &MockPDAPIClient{ctrl: ctrl}
	mock.recorder = &MockPDAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPDAPIClient) EXPECT() *MockPDAPIClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPDAPIClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPDAPIClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPDAPIClient)(nil).Close))
}

// CollectMemberEndpoints mocks base method.
func (m *MockPDAPIClient) CollectMemberEndpoints(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectMemberEndpoints", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectMemberEndpoints indicates an expected call of CollectMemberEndpoints.
func (mr *MockPDAPIClientMockRecorder) CollectMemberEndpoints(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectMemberEndpoints", reflect.TypeOf((*MockPDAPIClient)(nil).CollectMemberEndpoints), ctx)
}

// GetKeyspaceMetaByID mocks base method.
func (m *MockPDAPIClient) GetKeyspaceMetaByID(ctx context.Context, keyspaceID uint32) (*keyspacepb.KeyspaceMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyspaceMetaByID", ctx, keyspaceID)
	ret0, _ := ret[0].(*keyspacepb.KeyspaceMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyspaceMetaByID indicates an expected call of GetKeyspaceMetaByID.
func (mr *MockPDAPIClientMockRecorder) GetKeyspaceMetaByID(ctx, keyspaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyspaceMetaByID", reflect.TypeOf((*MockPDAPIClient)(nil).GetKeyspaceMetaByID), ctx, keyspaceID)
}

// Healthy mocks base method.
func (m *MockPDAPIClient) Healthy(ctx context.Context, endpoint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthy", ctx, endpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// Healthy indicates an expected call of Healthy.
func (mr *MockPDAPIClientMockRecorder) Healthy(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockPDAPIClient)(nil).Healthy), ctx, endpoint)
}

// ListGcServiceSafePoint mocks base method.
func (m *MockPDAPIClient) ListGcServiceSafePoint(ctx context.Context) (*ListServiceGCSafepoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGcServiceSafePoint", ctx)
	ret0, _ := ret[0].(*ListServiceGCSafepoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGcServiceSafePoint indicates an expected call of ListGcServiceSafePoint.
func (mr *MockPDAPIClientMockRecorder) ListGcServiceSafePoint(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGcServiceSafePoint", reflect.TypeOf((*MockPDAPIClient)(nil).ListGcServiceSafePoint), ctx)
}

// LoadKeyspace mocks base method.
func (m *MockPDAPIClient) LoadKeyspace(ctx context.Context, name string) (*keyspacepb.KeyspaceMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadKeyspace", ctx, name)
	ret0, _ := ret[0].(*keyspacepb.KeyspaceMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadKeyspace indicates an expected call of LoadKeyspace.
func (mr *MockPDAPIClientMockRecorder) LoadKeyspace(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadKeyspace", reflect.TypeOf((*MockPDAPIClient)(nil).LoadKeyspace), ctx, name)
}

// ScanRegions mocks base method.
func (m *MockPDAPIClient) ScanRegions(ctx context.Context, span heartbeatpb.TableSpan) ([]RegionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanRegions", ctx, span)
	ret0, _ := ret[0].([]RegionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanRegions indicates an expected call of ScanRegions.
func (mr *MockPDAPIClientMockRecorder) ScanRegions(ctx, span interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanRegions", reflect.TypeOf((*MockPDAPIClient)(nil).ScanRegions), ctx, span)
}

// UpdateMetaLabel mocks base method.
func (m *MockPDAPIClient) UpdateMetaLabel(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetaLabel", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetaLabel indicates an expected call of UpdateMetaLabel.
func (mr *MockPDAPIClientMockRecorder) UpdateMetaLabel(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetaLabel", reflect.TypeOf((*MockPDAPIClient)(nil).UpdateMetaLabel), ctx)
}
