// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: logservice/logservicepb/logservice.proto

package logservicepb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	heartbeatpb "github.com/pingcap/ticdc/heartbeatpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubscriptionState struct {
	SubID        uint64                 `protobuf:"varint,1,opt,name=SubID,proto3" json:"SubID,omitempty"`
	Span         *heartbeatpb.TableSpan `protobuf:"bytes,2,opt,name=Span,proto3" json:"Span,omitempty"`
	CheckpointTs uint64                 `protobuf:"varint,3,opt,name=CheckpointTs,proto3" json:"CheckpointTs,omitempty"`
	ResolvedTs   uint64                 `protobuf:"varint,4,opt,name=ResolvedTs,proto3" json:"ResolvedTs,omitempty"`
}

func (m *SubscriptionState) Reset()         { *m = SubscriptionState{} }
func (m *SubscriptionState) String() string { return proto.CompactTextString(m) }
func (*SubscriptionState) ProtoMessage()    {}
func (*SubscriptionState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1db670929506a40, []int{0}
}
func (m *SubscriptionState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriptionState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionState.Merge(m, src)
}
func (m *SubscriptionState) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionState) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionState.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionState proto.InternalMessageInfo

func (m *SubscriptionState) GetSubID() uint64 {
	if m != nil {
		return m.SubID
	}
	return 0
}

func (m *SubscriptionState) GetSpan() *heartbeatpb.TableSpan {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *SubscriptionState) GetCheckpointTs() uint64 {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

func (m *SubscriptionState) GetResolvedTs() uint64 {
	if m != nil {
		return m.ResolvedTs
	}
	return 0
}

// TableState stores all subscription states for the same table
type TableState struct {
	Subscriptions []*SubscriptionState `protobuf:"bytes,1,rep,name=Subscriptions,proto3" json:"Subscriptions,omitempty"`
}

func (m *TableState) Reset()         { *m = TableState{} }
func (m *TableState) String() string { return proto.CompactTextString(m) }
func (*TableState) ProtoMessage()    {}
func (*TableState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1db670929506a40, []int{1}
}
func (m *TableState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableState.Merge(m, src)
}
func (m *TableState) XXX_Size() int {
	return m.Size()
}
func (m *TableState) XXX_DiscardUnknown() {
	xxx_messageInfo_TableState.DiscardUnknown(m)
}

var xxx_messageInfo_TableState proto.InternalMessageInfo

func (m *TableState) GetSubscriptions() []*SubscriptionState {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

// EventStoreState stores a single node's event store state
type EventStoreState struct {
	// tableID -> TableState
	TableStates map[int64]*TableState `protobuf:"bytes,1,rep,name=TableStates,proto3" json:"TableStates,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *EventStoreState) Reset()         { *m = EventStoreState{} }
func (m *EventStoreState) String() string { return proto.CompactTextString(m) }
func (*EventStoreState) ProtoMessage()    {}
func (*EventStoreState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1db670929506a40, []int{2}
}
func (m *EventStoreState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStoreState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStoreState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStoreState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStoreState.Merge(m, src)
}
func (m *EventStoreState) XXX_Size() int {
	return m.Size()
}
func (m *EventStoreState) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStoreState.DiscardUnknown(m)
}

var xxx_messageInfo_EventStoreState proto.InternalMessageInfo

func (m *EventStoreState) GetTableStates() map[int64]*TableState {
	if m != nil {
		return m.TableStates
	}
	return nil
}

type ChangefeedStateEntry struct {
	ChangefeedID *heartbeatpb.ChangefeedID `protobuf:"bytes,1,opt,name=ChangefeedID,proto3" json:"ChangefeedID,omitempty"`
	ResolvedTs   uint64                    `protobuf:"varint,2,opt,name=ResolvedTs,proto3" json:"ResolvedTs,omitempty"`
}

func (m *ChangefeedStateEntry) Reset()         { *m = ChangefeedStateEntry{} }
func (m *ChangefeedStateEntry) String() string { return proto.CompactTextString(m) }
func (*ChangefeedStateEntry) ProtoMessage()    {}
func (*ChangefeedStateEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1db670929506a40, []int{3}
}
func (m *ChangefeedStateEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangefeedStateEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangefeedStateEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangefeedStateEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangefeedStateEntry.Merge(m, src)
}
func (m *ChangefeedStateEntry) XXX_Size() int {
	return m.Size()
}
func (m *ChangefeedStateEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangefeedStateEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ChangefeedStateEntry proto.InternalMessageInfo

func (m *ChangefeedStateEntry) GetChangefeedID() *heartbeatpb.ChangefeedID {
	if m != nil {
		return m.ChangefeedID
	}
	return nil
}

func (m *ChangefeedStateEntry) GetResolvedTs() uint64 {
	if m != nil {
		return m.ResolvedTs
	}
	return 0
}

type ChangefeedStates struct {
	// A list of changefeed states.
	States []*ChangefeedStateEntry `protobuf:"bytes,1,rep,name=States,proto3" json:"States,omitempty"`
}

func (m *ChangefeedStates) Reset()         { *m = ChangefeedStates{} }
func (m *ChangefeedStates) String() string { return proto.CompactTextString(m) }
func (*ChangefeedStates) ProtoMessage()    {}
func (*ChangefeedStates) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1db670929506a40, []int{4}
}
func (m *ChangefeedStates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangefeedStates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangefeedStates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangefeedStates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangefeedStates.Merge(m, src)
}
func (m *ChangefeedStates) XXX_Size() int {
	return m.Size()
}
func (m *ChangefeedStates) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangefeedStates.DiscardUnknown(m)
}

var xxx_messageInfo_ChangefeedStates proto.InternalMessageInfo

func (m *ChangefeedStates) GetStates() []*ChangefeedStateEntry {
	if m != nil {
		return m.States
	}
	return nil
}

type ReusableEventServiceRequest struct {
	ID      *heartbeatpb.DispatcherID `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Span    *heartbeatpb.TableSpan    `protobuf:"bytes,2,opt,name=Span,proto3" json:"Span,omitempty"`
	StartTs uint64                    `protobuf:"varint,3,opt,name=StartTs,proto3" json:"StartTs,omitempty"`
}

func (m *ReusableEventServiceRequest) Reset()         { *m = ReusableEventServiceRequest{} }
func (m *ReusableEventServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ReusableEventServiceRequest) ProtoMessage()    {}
func (*ReusableEventServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1db670929506a40, []int{5}
}
func (m *ReusableEventServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReusableEventServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReusableEventServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReusableEventServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReusableEventServiceRequest.Merge(m, src)
}
func (m *ReusableEventServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReusableEventServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReusableEventServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReusableEventServiceRequest proto.InternalMessageInfo

func (m *ReusableEventServiceRequest) GetID() *heartbeatpb.DispatcherID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ReusableEventServiceRequest) GetSpan() *heartbeatpb.TableSpan {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *ReusableEventServiceRequest) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

type ReusableEventServiceResponse struct {
	ID    *heartbeatpb.DispatcherID `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Nodes []string                  `protobuf:"bytes,2,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
}

func (m *ReusableEventServiceResponse) Reset()         { *m = ReusableEventServiceResponse{} }
func (m *ReusableEventServiceResponse) String() string { return proto.CompactTextString(m) }
func (*ReusableEventServiceResponse) ProtoMessage()    {}
func (*ReusableEventServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1db670929506a40, []int{6}
}
func (m *ReusableEventServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReusableEventServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReusableEventServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReusableEventServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReusableEventServiceResponse.Merge(m, src)
}
func (m *ReusableEventServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReusableEventServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReusableEventServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReusableEventServiceResponse proto.InternalMessageInfo

func (m *ReusableEventServiceResponse) GetID() *heartbeatpb.DispatcherID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ReusableEventServiceResponse) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscriptionState)(nil), "logservicepb.SubscriptionState")
	proto.RegisterType((*TableState)(nil), "logservicepb.TableState")
	proto.RegisterType((*EventStoreState)(nil), "logservicepb.EventStoreState")
	proto.RegisterMapType((map[int64]*TableState)(nil), "logservicepb.EventStoreState.TableStatesEntry")
	proto.RegisterType((*ChangefeedStateEntry)(nil), "logservicepb.ChangefeedStateEntry")
	proto.RegisterType((*ChangefeedStates)(nil), "logservicepb.ChangefeedStates")
	proto.RegisterType((*ReusableEventServiceRequest)(nil), "logservicepb.ReusableEventServiceRequest")
	proto.RegisterType((*ReusableEventServiceResponse)(nil), "logservicepb.ReusableEventServiceResponse")
}

func init() {
	proto.RegisterFile("logservice/logservicepb/logservice.proto", fileDescriptor_a1db670929506a40)
}

var fileDescriptor_a1db670929506a40 = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xee, 0x24, 0xed, 0x8a, 0xaf, 0x2b, 0xd6, 0x50, 0x24, 0xee, 0x4a, 0x2c, 0x01, 0x21, 0x7a,
	0x48, 0xa1, 0x5e, 0x64, 0x41, 0x04, 0xb7, 0x3d, 0xec, 0x65, 0x91, 0x49, 0x0f, 0xe2, 0x45, 0x26,
	0xe9, 0xb3, 0x09, 0x5b, 0x33, 0x63, 0x66, 0x52, 0xd8, 0x3f, 0x21, 0x5e, 0xfd, 0x31, 0xde, 0x3d,
	0xee, 0xd1, 0xa3, 0xb4, 0x7f, 0x44, 0x92, 0xb4, 0x76, 0xa6, 0xbb, 0x1e, 0x7a, 0x9b, 0x37, 0xef,
	0x7b, 0xdf, 0xfb, 0xde, 0xf7, 0x66, 0x20, 0x58, 0xf0, 0xb9, 0xc4, 0x62, 0x99, 0x25, 0x38, 0xdc,
	0x1d, 0x45, 0xac, 0x05, 0xa1, 0x28, 0xb8, 0xe2, 0xce, 0xb1, 0x9e, 0x3e, 0x39, 0x4d, 0x91, 0x15,
	0x2a, 0x46, 0xa6, 0x44, 0x3c, 0xfc, 0x77, 0x6e, 0xa0, 0xfe, 0x0f, 0x02, 0x8f, 0xa2, 0x32, 0x96,
	0x49, 0x91, 0x09, 0x95, 0xf1, 0x3c, 0x52, 0x4c, 0xa1, 0xd3, 0x87, 0x4e, 0x54, 0xc6, 0x17, 0x63,
	0x97, 0x0c, 0x48, 0xd0, 0xa6, 0x4d, 0xe0, 0xbc, 0x84, 0x76, 0x24, 0x58, 0xee, 0x5a, 0x03, 0x12,
	0x74, 0x47, 0x8f, 0x43, 0x8d, 0x37, 0x9c, 0xb2, 0x78, 0x81, 0x55, 0x96, 0xd6, 0x18, 0xc7, 0x87,
	0xe3, 0xf3, 0x14, 0x93, 0x2b, 0xc1, 0xb3, 0x5c, 0x4d, 0xa5, 0x6b, 0xd7, 0x44, 0xc6, 0x9d, 0xe3,
	0x01, 0x50, 0x94, 0x7c, 0xb1, 0xc4, 0xd9, 0x54, 0xba, 0xed, 0x1a, 0xa1, 0xdd, 0xf8, 0x11, 0x40,
	0x43, 0x5b, 0x6b, 0x9a, 0xc0, 0x03, 0x5d, 0xa8, 0x74, 0xc9, 0xc0, 0x0e, 0xba, 0xa3, 0x67, 0xa1,
	0x3e, 0x6c, 0x78, 0x6b, 0x16, 0x6a, 0x56, 0xf9, 0x3f, 0x09, 0x3c, 0x9c, 0x2c, 0x31, 0x57, 0x91,
	0xe2, 0xc5, 0x86, 0xfa, 0x3d, 0x74, 0x77, 0x8d, 0xb6, 0xc4, 0xa1, 0x49, 0xbc, 0x57, 0x13, 0x6a,
	0x05, 0x93, 0x5c, 0x15, 0xd7, 0x54, 0xa7, 0x38, 0xf9, 0x00, 0xbd, 0x7d, 0x80, 0xd3, 0x03, 0xfb,
	0x0a, 0xaf, 0x6b, 0x4b, 0x6d, 0x5a, 0x1d, 0x9d, 0x10, 0x3a, 0x4b, 0xb6, 0x28, 0x71, 0xe3, 0xa8,
	0x6b, 0x76, 0xdc, 0x11, 0xd0, 0x06, 0x76, 0x66, 0xbd, 0x26, 0x7e, 0x09, 0xfd, 0xf3, 0x94, 0xe5,
	0x73, 0xfc, 0x8c, 0x38, 0xab, 0xb3, 0x0d, 0xfb, 0x9b, 0xca, 0xf0, 0xed, 0xfd, 0x66, 0x73, 0xdd,
	0xd1, 0x13, 0x63, 0x49, 0x3a, 0x80, 0x1a, 0xf0, 0xbd, 0x5d, 0x58, 0xb7, 0x76, 0x71, 0x09, 0xbd,
	0xbd, 0xb6, 0xd2, 0x39, 0x83, 0x23, 0xc3, 0x31, 0xdf, 0xd4, 0x7f, 0x97, 0x4c, 0xba, 0xa9, 0xf0,
	0xbf, 0x11, 0x38, 0xa5, 0x58, 0xca, 0x6a, 0xc6, 0xc6, 0xda, 0xa6, 0x8e, 0xe2, 0xd7, 0x12, 0xa5,
	0x72, 0x5e, 0x80, 0xf5, 0x9f, 0x21, 0xc6, 0x99, 0x14, 0x4c, 0x25, 0x29, 0x16, 0x17, 0x63, 0x6a,
	0x1d, 0xf8, 0x2c, 0x5d, 0xb8, 0x17, 0x29, 0x56, 0xec, 0x5e, 0xe4, 0x36, 0xf4, 0x3f, 0xc1, 0xd3,
	0xbb, 0xf5, 0x48, 0xc1, 0x73, 0x89, 0x87, 0x08, 0xea, 0x43, 0xe7, 0x92, 0xcf, 0xb0, 0xb2, 0xd1,
	0x0e, 0xee, 0xd3, 0x26, 0x78, 0xf7, 0xf6, 0xd7, 0xca, 0x23, 0x37, 0x2b, 0x8f, 0xfc, 0x59, 0x79,
	0xe4, 0xfb, 0xda, 0x6b, 0xdd, 0xac, 0xbd, 0xd6, 0xef, 0xb5, 0xd7, 0xfa, 0xf8, 0x7c, 0x9e, 0xa9,
	0xb4, 0x8c, 0xc3, 0x84, 0x7f, 0x19, 0x8a, 0x2c, 0x9f, 0x27, 0x4c, 0x0c, 0x55, 0x96, 0xcc, 0x12,
	0xe3, 0x9b, 0xc7, 0x47, 0xf5, 0x8f, 0x7d, 0xf5, 0x37, 0x00, 0x00, 0xff, 0xff, 0x6b, 0xcb, 0x75,
	0xd6, 0x08, 0x04, 0x00, 0x00,
}

func (m *SubscriptionState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriptionState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResolvedTs != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ResolvedTs))
		i--
		dAtA[i] = 0x20
	}
	if m.CheckpointTs != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x18
	}
	if m.Span != nil {
		{
			size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SubID != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.SubID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TableState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for iNdEx := len(m.Subscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventStoreState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStoreState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStoreState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TableStates) > 0 {
		for k := range m.TableStates {
			v := m.TableStates[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintLogservice(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintLogservice(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLogservice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangefeedStateEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangefeedStateEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangefeedStateEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResolvedTs != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.ResolvedTs))
		i--
		dAtA[i] = 0x10
	}
	if m.ChangefeedID != nil {
		{
			size, err := m.ChangefeedID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangefeedStates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangefeedStates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangefeedStates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.States) > 0 {
		for iNdEx := len(m.States) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.States[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogservice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReusableEventServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReusableEventServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReusableEventServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartTs != 0 {
		i = encodeVarintLogservice(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x18
	}
	if m.Span != nil {
		{
			size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReusableEventServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReusableEventServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReusableEventServiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Nodes[iNdEx])
			copy(dAtA[i:], m.Nodes[iNdEx])
			i = encodeVarintLogservice(dAtA, i, uint64(len(m.Nodes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogservice(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogservice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubscriptionState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubID != 0 {
		n += 1 + sovLogservice(uint64(m.SubID))
	}
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.CheckpointTs != 0 {
		n += 1 + sovLogservice(uint64(m.CheckpointTs))
	}
	if m.ResolvedTs != 0 {
		n += 1 + sovLogservice(uint64(m.ResolvedTs))
	}
	return n
}

func (m *TableState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	return n
}

func (m *EventStoreState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TableStates) > 0 {
		for k, v := range m.TableStates {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovLogservice(uint64(l))
			}
			mapEntrySize := 1 + sovLogservice(uint64(k)) + l
			n += mapEntrySize + 1 + sovLogservice(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ChangefeedStateEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != nil {
		l = m.ChangefeedID.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.ResolvedTs != 0 {
		n += 1 + sovLogservice(uint64(m.ResolvedTs))
	}
	return n
}

func (m *ChangefeedStates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.States) > 0 {
		for _, e := range m.States {
			l = e.Size()
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	return n
}

func (m *ReusableEventServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if m.StartTs != 0 {
		n += 1 + sovLogservice(uint64(m.StartTs))
	}
	return n
}

func (m *ReusableEventServiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovLogservice(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, s := range m.Nodes {
			l = len(s)
			n += 1 + l + sovLogservice(uint64(l))
		}
	}
	return n
}

func sovLogservice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogservice(x uint64) (n int) {
	return sovLogservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscriptionState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubID", wireType)
			}
			m.SubID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &heartbeatpb.TableSpan{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedTs", wireType)
			}
			m.ResolvedTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolvedTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &SubscriptionState{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStoreState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStoreState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStoreState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TableStates == nil {
				m.TableStates = make(map[int64]*TableState)
			}
			var mapkey int64
			var mapvalue *TableState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLogservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLogservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TableState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLogservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLogservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TableStates[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangefeedStateEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangefeedStateEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangefeedStateEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedID == nil {
				m.ChangefeedID = &heartbeatpb.ChangefeedID{}
			}
			if err := m.ChangefeedID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedTs", wireType)
			}
			m.ResolvedTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolvedTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangefeedStates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangefeedStates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangefeedStates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.States = append(m.States, &ChangefeedStateEntry{})
			if err := m.States[len(m.States)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReusableEventServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReusableEventServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReusableEventServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &heartbeatpb.DispatcherID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &heartbeatpb.TableSpan{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReusableEventServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReusableEventServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReusableEventServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &heartbeatpb.DispatcherID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogservice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogservice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogservice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogservice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogservice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogservice = fmt.Errorf("proto: unexpected end of group")
)
