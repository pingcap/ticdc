#!/usr/bin/env bash
# depencencies: minio, mc(minio client)

set -e
export PS4='+$(basename ${BASH_SOURCE}):${LINENO}:'
set -x

# Random generate the sockets config.
# Make sure we dont use the same sock.
randomGenSocketsConf() {
	config_file="$1"
	random_str=$(date '+%s%N')
	if [ "$(uname)" == "Darwin" ]; then
		random_str=$(cat /dev/random | LC_ALL=C tr -dc "a-zA-Z0-9" | head -c 10)
	fi

	echo "socket = \"/tmp/tidb-$random_str.sock\"" >>"$config_file"
}

check_bin() {
	if [ ! -f "$1" ]; then
		echo "Error: $1 is not a file" >&2
		exit 1
	fi
	if [ ! -x "$1" ]; then
		echo "Error: $1 is not executable" >&2
		exit 1
	fi
}

show_help() {
	cat <<EOF
Usage: $0 [OPTIONS]

Options:
  --multiple_upstream_pd        upstream pd count (default: 1, max 3)
  -h, --help                    Show this help message and exit
EOF
}

check_port_available() {
	local host=${1:-127.0.0.1}
	local port=$2
	local prompt=$3
	while ! nc -z "$host" "$port"; do
		echo "$prompt"
		sleep 1
	done
}

OUT_DIR=
tidb_config=
pd_config=
tikv_config=
retry_times=3
multiple_upstream_pd="false"
while [[ ${1} ]]; do
	case "${1}" in
	--workdir)
		OUT_DIR=${2}
		shift
		;;
	--tidb-config)
		tidb_config=${2}
		shift
		;;
	--pd-config)
		pd_config=${2}
		shift
		;;
	--tikv-config)
		tikv_config=${2}
		shift
		;;
	--retry)
		retry_times=${2}
		shift
		;;
	--multiple-upstream-pd)
		multiple_upstream_pd=${2}
		shift
		;;
	*)
		echo "Unknown parameter: ${1}" >&2
		exit 1
		;;
	esac

	if ! shift; then
		echo 'Missing parameter argument.' >&2
		exit 1
	fi
done

if [ -z "$OUT_DIR" ]; then
	echo "Error: environment variable OUT_DIR is empty" >&2
	exit 1
fi

# start minio
echo "Starting MinIO server..."
mkdir -p "$OUT_DIR/minio/data"
mkdir -p "$OUT_DIR/minio/log"
minio server --address ":$MINIO_API_PORT" --console-address ":$MINIO_CONSOLE_PORT" "$OUT_DIR/minio/data" \
	>"$OUT_DIR/minio/log/minio-stdout.log" 2>"$OUT_DIR/minio/log/minio-stderr.log" &

check_port_available "" "$MINIO_API_PORT" "Wait for minio to be available"
# Sleep for 1 second until MinIO becomes available.
sleep 1

# create bucket
mc alias set "$MINIO_MC_ALIAS" "http://127.0.0.1:$MINIO_API_PORT" "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD"
if ! mc ls "$MINIO_MC_ALIAS/cse-test" &>/dev/null; then
	mc mb "$MINIO_MC_ALIAS/cse-test"
else
	echo "Bucket cse-test already exists, skipping creation"
fi

################### start pd #####################
cat >"$OUT_DIR/upstream-pd.toml" <<EOF
[keyspace]
pre-alloc = ["$KEYSPACE_NAME"]
EOF

cat >"$OUT_DIR/downstream-pd.toml" <<EOF
[replication]
# Set it to 1 to make sure we have enough replicas to run placement-rules.
max-replicas = 1
enable-placement-rules = true
EOF

echo "Starting upstream pd..."
pd-server-nextgen --version
if [[ "$multiple_upstream_pd" == "true" ]]; then
	pd_count=3
	initial_cluster="pd1=http://${UP_PD_HOST_1}:${UP_PD_PEER_PORT_1},pd2=http://${UP_PD_HOST_2}:${UP_PD_PEER_PORT_2},pd3=http://${UP_PD_HOST_3}:${UP_PD_PEER_PORT_3}"
else
	pd_count=1
	initial_cluster="pd1=http://${UP_PD_HOST_1}:${UP_PD_PEER_PORT_1}"
fi

mkdir -p "$OUT_DIR/upstream/data"
mkdir -p "$OUT_DIR/upstream/log/pd"
for idx in $(seq 1 $pd_count); do
	host="UP_PD_HOST_$idx"
	port="UP_PD_PORT_$idx"
	peer_port="UP_PD_PEER_PORT_$idx"
	pd-server-nextgen \
		--advertise-client-urls "http://${!host}:${!port}" \
		--client-urls "http://0.0.0.0:${!port}" \
		--advertise-peer-urls "http://${!host}:${!peer_port}" \
		--peer-urls "http://0.0.0.0:${!peer_port}" \
		--config "$OUT_DIR/upstream-pd.toml" \
		--log-file "$OUT_DIR/upstream/log/pd/pd$idx.log" \
		--data-dir "$OUT_DIR/upstream/data/pd$idx" \
		--name="pd$idx" \
		--initial-cluster "${initial_cluster}" \
		>"$OUT_DIR/upstream/log/pd/pd$idx-stdout.log" \
		2>"$OUT_DIR/upstream/log/pd/pd$idx-stderr.log" &
done

mkdir -p "$OUT_DIR/downstream/data"
mkdir -p "$OUT_DIR/downstream/log/pd"
echo "Starting downstream PD..."
pd-server --version
pd-server \
	--advertise-client-urls "http://${DOWN_PD_HOST}:${DOWN_PD_PORT}" \
	--client-urls "http://0.0.0.0:${DOWN_PD_PORT}" \
	--advertise-peer-urls "http://${DOWN_PD_HOST}:${DOWN_PD_PEER_PORT}" \
	--peer-urls "http://0.0.0.0:${DOWN_PD_PEER_PORT}" \
	--config "$OUT_DIR/downstream-pd.toml" \
	--log-file "$OUT_DIR/downstream/log/pd/pd.log" \
	--data-dir "$OUT_DIR/downstream/data/pd" \
	>"$OUT_DIR/downstream/log/pd/pd-stdout.log" \
	2>"$OUT_DIR/downstream/log/pd/pd-stderr.log" &

# wait for upstream PD to be ready
echo "Verifying upstream PD is started..."
for idx in $(seq 1 $pd_count); do
	host="UP_PD_HOST_$idx"
	port="UP_PD_PORT_$idx"

	echo "checking upstream pd $idx ${!host}:${!port}"
	check_pd_health "${!host}" "${!port}" 60
done

# wait for downstream PD to be ready
echo "checking downstream pd $DOWN_PD_HOST:$DOWN_PD_PORT"
check_pd_health "$DOWN_PD_HOST" "$DOWN_PD_PORT" 60

################### start TiKV #####################
cat >"$OUT_DIR/upstream-tikv.toml" <<EOF
[storage]
api-version = 2
enable-ttl = true

[dfs]
prefix = "nextgen"
s3-endpoint = "http://127.0.0.1:$MINIO_API_PORT"
s3-key-id = "$MINIO_ROOT_USER"
s3-secret-key = "$MINIO_ROOT_PASSWORD"
s3-bucket = "cse-test"
s3-region = "local"

[rfengine]
wal-sync-dir = "$OUT_DIR/wal-sync/tikv/raft-wal"
lightweight-backup = true
target-file-size = "512MB"
wal-chunk-target-file-size = "128MB"
EOF

cat >"$OUT_DIR/downstream-tikv.toml" <<EOF
[storage]
# Disable creating a large temp file.
reserve-space = "0MB"
[rocksdb]
max-open-files = 4096
[raftdb]
max-open-files = 4096
[raftstore]
# true (default value) for high reliability, this can prevent data loss when power failure.
sync-log = false
[cdc]
hibernate-regions-compatible = true
EOF

echo "Starting upstream TiKV..."
mkdir -p "$OUT_DIR/upstream/data"
mkdir -p "$OUT_DIR/upstream/log/tikv"
tikv-server-nextgen --version
for idx in $(seq 1 3); do
	host="UP_TIKV_HOST_$idx"
	port="UP_TIKV_PORT_$idx"
	status_port="UP_TIKV_STATUS_PORT_$idx"
	tikv-server-nextgen \
		--pd "${UP_PD_HOST_1}:${UP_PD_PORT_1}" \
		-A "${!host}:${!port}" \
		--status-addr "${!host}:${!status_port}" \
		--log-file "$OUT_DIR/upstream/log/tikv/tikv$idx.log" \
		--log-level info \
		-C "$OUT_DIR/upstream-tikv.toml" \
		-s "$OUT_DIR/upstream/data/tikv$idx" \
		>"$OUT_DIR/upstream/log/tikv/tikv$idx-stdout.log" \
		2>"$OUT_DIR/upstream/log/tikv/tikv$idx-stderr.log" &
done

echo "Starting downstream TiKV..."
mkdir -p "$OUT_DIR/downstream/data"
mkdir -p "$OUT_DIR/downstream/log/tikv"
tikv-server --version
tikv-server \
	--pd "${DOWN_PD_HOST}:${DOWN_PD_PORT}" \
	-A "${DOWN_TIKV_HOST}:${DOWN_TIKV_PORT}" \
	--status-addr "${DOWN_TIKV_HOST}:${DOWN_TIKV_STATUS_PORT}" \
	--log-file "$OUT_DIR/downstream/log/tikv/tikv.log" \
	--log-level info \
	-C "$OUT_DIR/downstream-tikv.toml" \
	-s "$OUT_DIR/downstream/data/tikv" \
	>"$OUT_DIR/downstream/log/tikv/tikv-stdout.log" \
	2>"$OUT_DIR/downstream/log/tikv/tikv-stderr.log" &

sleep 2

####################start TiDB####################
cat >"$OUT_DIR/upstream-tidb-system.toml" <<EOF
keyspace-name = "SYSTEM"
split-table = false
enable-telemetry = false
mem-quota-query = 671088640
new_collations_enabled_on_first_bootstrap = true
run-auto-analyze = false
server-memory-quota = 2684354560
analyze-always-skip-wide-columns = true

[log.file]
max-backups = 100

[performance]
tcp-keep-alive = true

[security]
enable-sem = false

[instance]
tidb_service_scope = 'dxf_service'
max-server-connections = 0
EOF

cat >"$OUT_DIR/upstream-tidb-$KEYSPACE_NAME.toml" <<EOF
keyspace-name = "$KEYSPACE_NAME"
split-table = false
enable-telemetry = false
mem-quota-query = 671088640
new_collations_enabled_on_first_bootstrap = true
run-auto-analyze = false
server-memory-quota = 2684354560
analyze-always-skip-wide-columns = true

[log.file]
max-backups = 100

[performance]
tcp-keep-alive = true

[security]
enable-sem = false

[instance]
max-server-connections = 0
EOF

cp "$OUT_DIR/upstream-tidb-$KEYSPACE_NAME.toml" "$OUT_DIR/upstream-tidb-$KEYSPACE_NAME-other.toml"

cat >"$OUT_DIR/downstream-tidb.toml" <<EOF
split-table = true
new_collations_enabled_on_first_bootstrap = true
EOF

echo "Starting upstream system TiDB"
mkdir -p "$OUT_DIR/upstream/log/tidb-system"
tidb-server-nextgen -V
randomGenSocketsConf "$OUT_DIR/upstream-tidb-system.toml"
tidb-server-nextgen \
	-P "${UP_TIDB_SYSTEM_PORT}" \
	-config "$OUT_DIR/upstream-tidb-system.toml" \
	--store tikv \
	--path "${UP_PD_HOST_1}:${UP_PD_PORT_1}" \
	--status "${UP_TIDB_SYSTEM_STATUS}" \
	--log-file "$OUT_DIR/upstream/log/tidb-system/tidb.log" \
	>"$OUT_DIR/upstream/log/tidb-system/tidb-stdout.log" \
	2>"$OUT_DIR/upstream/log/tidb-system/tidb-stderr.log" &

# The upstream system TiDB should be ready before the keyspace tidb starting
echo "Verifying Upstream system TiDB is started..."
check_tidb_health "$UP_TIDB_SYSTEM_HOST" "$UP_TIDB_SYSTEM_PORT" "" 60

echo "Starting upstream $KEYSPACE_NAME TiDB"
mkdir -p "$OUT_DIR/upstream/log/tidb-$KEYSPACE_NAME"
randomGenSocketsConf "$OUT_DIR/upstream-tidb-$KEYSPACE_NAME.toml"
tidb-server-nextgen \
	-P "${UP_TIDB_PORT}" \
	-config "$OUT_DIR/upstream-tidb-$KEYSPACE_NAME.toml" \
	--store tikv \
	--path "${UP_PD_HOST_1}:${UP_PD_PORT_1}" \
	--status "${UP_TIDB_STATUS}" \
	--log-file "$OUT_DIR/upstream/log/tidb-$KEYSPACE_NAME/tidb.log" \
	>"$OUT_DIR/upstream/log/tidb-$KEYSPACE_NAME/tidb-stdout.log" \
	2>"$OUT_DIR/upstream/log/tidb-$KEYSPACE_NAME/tidb-stderr.log" &

mkdir -p "$OUT_DIR/upstream/log/tidb-$KEYSPACE_NAME-other"
randomGenSocketsConf "$OUT_DIR/upstream-tidb-$KEYSPACE_NAME-other.toml"
tidb-server-nextgen \
	-P "${UP_TIDB_OTHER_PORT}" \
	-config "$OUT_DIR/upstream-tidb-$KEYSPACE_NAME.toml" \
	--store tikv \
	--path "${UP_PD_HOST_1}:${UP_PD_PORT_1}" \
	--status "${UP_TIDB_OTHER_STATUS}" \
	--log-file "$OUT_DIR/upstream/log/tidb-$KEYSPACE_NAME-other/tidb.log" \
	>"$OUT_DIR/upstream/log/tidb-$KEYSPACE_NAME-other/tidb-stdout.log" \
	2>"$OUT_DIR/upstream/log/tidb-$KEYSPACE_NAME-other/tidb-stderr.log" &

echo "Starting downstream TiDB..."
mkdir -p "$OUT_DIR/downstream/log/tidb"
tidb-server -V
randomGenSocketsConf "$OUT_DIR/downstream-tidb.toml"
tidb-server \
	-P "${DOWN_TIDB_PORT}" \
	-config "$OUT_DIR/downstream-tidb.toml" \
	--store tikv \
	--path "${DOWN_PD_HOST}:${DOWN_PD_PORT}" \
	--status "${DOWN_TIDB_STATUS}" \
	--log-file "$OUT_DIR/downstream/log/tidb/tidb.log" \
	>"$OUT_DIR/downstream/log/tidb/tidb-stdout.log" \
	2>"$OUT_DIR/downstream/log/tidb/tidb-stderr.log" &

echo "Verifying Upstream $KEYSPACE_NAME TiDB is started..."
check_tidb_health "$UP_TIDB_HOST" "$UP_TIDB_PORT" "$UP_TIDB_OTHER_PORT" 60

echo "Verifying downstream TiDB is started..."
check_tidb_health "$DOWN_TIDB_HOST" "$DOWN_TIDB_PORT" "" 60

run_sql "update mysql.tidb set variable_value='60m' where variable_name='tikv_gc_life_time';" "$UP_TIDB_HOST" "$UP_TIDB_PORT"
run_sql "update mysql.tidb set variable_value='60m' where variable_name='tikv_gc_life_time';" "$DOWN_TIDB_HOST" "$DOWN_TIDB_PORT"
run_sql "CREATE user 'normal'@'%' identified by '123456';" "$DOWN_TIDB_HOST" "$DOWN_TIDB_PORT"
run_sql "GRANT select,insert,update,delete,index,create,drop,alter,create view,references ON *.* TO 'normal'@'%';" "$DOWN_TIDB_HOST" "$DOWN_TIDB_PORT"
run_sql "FLUSH privileges" "$DOWN_TIDB_HOST" "$DOWN_TIDB_PORT"

################### start tiflash #####################
#cat >"$OUT_DIR/tiflash-config.toml" <<EOF
#tmp_path = "${OUT_DIR}/tiflash/tmp"
#display_name = "TiFlash"
#users_config = "${OUT_DIR}/tiflash/users.toml"
#path = "${OUT_DIR}/tiflash/db"
#mark_cache_size = 5368709120
#listen_host = "127.0.0.1"
#tcp_port = 5000
#http_port = 4500
#interserver_http_port = 5500
#
#[flash]
#tidb_status_addr = "127.0.0.1:8500"
#service_addr = "127.0.0.1:9500"
#
#[flash.proxy]
#addr = "127.0.0.1:9000"
#advertise-addr = "127.0.0.1:9000"
#data-dir = "${OUT_DIR}/tiflash/db/proxy"
#config = "${OUT_DIR}/tiflash-proxy.toml"
#log-file = "${OUT_DIR}/tiflash/log/proxy.log"
#
#[logger]
#level = "trace"
#log = "${OUT_DIR}/tiflash/log/server.log"
#errorlog = "${OUT_DIR}/tiflash/log/error.log"
#size = "4000M"
#count = 10
#
#[application]
#runAsDaemon = true
#
#[raft]
#pd_addr = "${UP_PD_HOST_1}:${UP_PD_PORT_1}"
#EOF
#
#cat >"$OUT_DIR/tiflash-proxy.toml" <<EOF
#log-level = "info"
#
#[server]
#engine-addr = "127.0.0.1:9500"
#status-addr = "127.0.0.1:17000"
#
#[raftstore]
#sync-log = true
#capacity = "100GB"
#hibernate-regions = false
#
#[rocksdb]
#wal-dir = ""
#max-open-files = 1000
#
#[rocksdb.defaultcf]
#block-cache-size = "1GB"
#
#[rocksdb.lockcf]
#block-cache-size = "1GB"
#
#[rocksdb.writecf]
#block-cache-size = "1GB"
#
#[raftdb]
#max-open-files = 1000
#
#[raftdb.defaultcf]
#block-cache-size = "1GB"
#EOF
#
#echo "Starting Upstream TiFlash..."
#mkdir -p ${OUT_DIR}/tiflash/ && cp $CUR/tiflash-users.toml ${OUT_DIR}/tiflash/users.toml
#tiflash version
#tiflash server --config-file "$OUT_DIR/tiflash-config.toml" &
#
#echo "Verifying Upstream TiFlash is started..."
## Make sure TiFlash is started.
#while ! curl -o /dev/null -sf http://127.0.0.1:17000/metrics 1>/dev/null 2>&1; do
#	i=$((i + 1))
#	if [ "$i" -gt 10 ]; then
#		cat ${OUT_DIR}/tiflash/log/proxy.log
#		cat ${OUT_DIR}/tiflash/log/server.log
#		cat ${OUT_DIR}/tiflash/log/error.log
#		echo 'Failed to start TiFlash'
#		exit 1
#	fi
#	sleep 2
#done
