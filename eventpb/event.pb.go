// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventpb/event.proto

package eventpb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	heartbeatpb "github.com/pingcap/ticdc/heartbeatpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OpType int32

const (
	OpType_OpTypePut    OpType = 0
	OpType_OpTypeDelete OpType = 1
)

var OpType_name = map[int32]string{
	0: "OpTypePut",
	1: "OpTypeDelete",
}

var OpType_value = map[string]int32{
	"OpTypePut":    0,
	"OpTypeDelete": 1,
}

func (x OpType) String() string {
	return proto.EnumName(OpType_name, int32(x))
}

func (OpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d7fb2554dfcf7f7d, []int{0}
}

type EventFilterRule struct {
	Matcher                  []string `protobuf:"bytes,1,rep,name=matcher,proto3" json:"matcher,omitempty"`
	IgnoreEvent              []string `protobuf:"bytes,2,rep,name=ignore_event,json=ignoreEvent,proto3" json:"ignore_event,omitempty"`
	IgnoreSql                []string `protobuf:"bytes,3,rep,name=ignore_sql,json=ignoreSql,proto3" json:"ignore_sql,omitempty"`
	IgnoreInsertValueExpr    string   `protobuf:"bytes,4,opt,name=ignore_insert_value_expr,json=ignoreInsertValueExpr,proto3" json:"ignore_insert_value_expr,omitempty"`
	IgnoreUpdateNewValueExpr string   `protobuf:"bytes,5,opt,name=ignore_update_new_value_expr,json=ignoreUpdateNewValueExpr,proto3" json:"ignore_update_new_value_expr,omitempty"`
	IgnoreUpdateOldValueExpr string   `protobuf:"bytes,6,opt,name=ignore_update_old_value_expr,json=ignoreUpdateOldValueExpr,proto3" json:"ignore_update_old_value_expr,omitempty"`
	IgnoreDeleteValueExpr    string   `protobuf:"bytes,7,opt,name=ignore_delete_value_expr,json=ignoreDeleteValueExpr,proto3" json:"ignore_delete_value_expr,omitempty"`
}

func (m *EventFilterRule) Reset()         { *m = EventFilterRule{} }
func (m *EventFilterRule) String() string { return proto.CompactTextString(m) }
func (*EventFilterRule) ProtoMessage()    {}
func (*EventFilterRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fb2554dfcf7f7d, []int{0}
}
func (m *EventFilterRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFilterRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFilterRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventFilterRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFilterRule.Merge(m, src)
}
func (m *EventFilterRule) XXX_Size() int {
	return m.Size()
}
func (m *EventFilterRule) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFilterRule.DiscardUnknown(m)
}

var xxx_messageInfo_EventFilterRule proto.InternalMessageInfo

func (m *EventFilterRule) GetMatcher() []string {
	if m != nil {
		return m.Matcher
	}
	return nil
}

func (m *EventFilterRule) GetIgnoreEvent() []string {
	if m != nil {
		return m.IgnoreEvent
	}
	return nil
}

func (m *EventFilterRule) GetIgnoreSql() []string {
	if m != nil {
		return m.IgnoreSql
	}
	return nil
}

func (m *EventFilterRule) GetIgnoreInsertValueExpr() string {
	if m != nil {
		return m.IgnoreInsertValueExpr
	}
	return ""
}

func (m *EventFilterRule) GetIgnoreUpdateNewValueExpr() string {
	if m != nil {
		return m.IgnoreUpdateNewValueExpr
	}
	return ""
}

func (m *EventFilterRule) GetIgnoreUpdateOldValueExpr() string {
	if m != nil {
		return m.IgnoreUpdateOldValueExpr
	}
	return ""
}

func (m *EventFilterRule) GetIgnoreDeleteValueExpr() string {
	if m != nil {
		return m.IgnoreDeleteValueExpr
	}
	return ""
}

type InnerFilterConfig struct {
	Rules            []string           `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	IgnoreTxnStartTs []uint64           `protobuf:"varint,2,rep,packed,name=ignore_txn_start_ts,json=ignoreTxnStartTs,proto3" json:"ignore_txn_start_ts,omitempty"`
	EventFilters     []*EventFilterRule `protobuf:"bytes,3,rep,name=EventFilters,proto3" json:"EventFilters,omitempty"`
}

func (m *InnerFilterConfig) Reset()         { *m = InnerFilterConfig{} }
func (m *InnerFilterConfig) String() string { return proto.CompactTextString(m) }
func (*InnerFilterConfig) ProtoMessage()    {}
func (*InnerFilterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fb2554dfcf7f7d, []int{1}
}
func (m *InnerFilterConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InnerFilterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InnerFilterConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InnerFilterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InnerFilterConfig.Merge(m, src)
}
func (m *InnerFilterConfig) XXX_Size() int {
	return m.Size()
}
func (m *InnerFilterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_InnerFilterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_InnerFilterConfig proto.InternalMessageInfo

func (m *InnerFilterConfig) GetRules() []string {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *InnerFilterConfig) GetIgnoreTxnStartTs() []uint64 {
	if m != nil {
		return m.IgnoreTxnStartTs
	}
	return nil
}

func (m *InnerFilterConfig) GetEventFilters() []*EventFilterRule {
	if m != nil {
		return m.EventFilters
	}
	return nil
}

type FilterConfig struct {
	CaseSensitive  bool               `protobuf:"varint,1,opt,name=caseSensitive,proto3" json:"caseSensitive,omitempty"`
	ForceReplicate bool               `protobuf:"varint,2,opt,name=forceReplicate,proto3" json:"forceReplicate,omitempty"`
	FilterConfig   *InnerFilterConfig `protobuf:"bytes,3,opt,name=filterConfig,proto3" json:"filterConfig,omitempty"`
}

func (m *FilterConfig) Reset()         { *m = FilterConfig{} }
func (m *FilterConfig) String() string { return proto.CompactTextString(m) }
func (*FilterConfig) ProtoMessage()    {}
func (*FilterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fb2554dfcf7f7d, []int{2}
}
func (m *FilterConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilterConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterConfig.Merge(m, src)
}
func (m *FilterConfig) XXX_Size() int {
	return m.Size()
}
func (m *FilterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FilterConfig proto.InternalMessageInfo

func (m *FilterConfig) GetCaseSensitive() bool {
	if m != nil {
		return m.CaseSensitive
	}
	return false
}

func (m *FilterConfig) GetForceReplicate() bool {
	if m != nil {
		return m.ForceReplicate
	}
	return false
}

func (m *FilterConfig) GetFilterConfig() *InnerFilterConfig {
	if m != nil {
		return m.FilterConfig
	}
	return nil
}

type ResolvedTs struct {
}

func (m *ResolvedTs) Reset()         { *m = ResolvedTs{} }
func (m *ResolvedTs) String() string { return proto.CompactTextString(m) }
func (*ResolvedTs) ProtoMessage()    {}
func (*ResolvedTs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fb2554dfcf7f7d, []int{3}
}
func (m *ResolvedTs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolvedTs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolvedTs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolvedTs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedTs.Merge(m, src)
}
func (m *ResolvedTs) XXX_Size() int {
	return m.Size()
}
func (m *ResolvedTs) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedTs.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedTs proto.InternalMessageInfo

type Event struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// nil for delete type
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// nil for insert type
	OldValue []byte `protobuf:"bytes,3,opt,name=OldValue,proto3" json:"OldValue,omitempty"`
	OpType   OpType `protobuf:"varint,4,opt,name=op_type,json=opType,proto3,enum=eventpb.OpType" json:"op_type,omitempty"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fb2554dfcf7f7d, []int{4}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Event) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Event) GetOldValue() []byte {
	if m != nil {
		return m.OldValue
	}
	return nil
}

func (m *Event) GetOpType() OpType {
	if m != nil {
		return m.OpType
	}
	return OpType_OpTypePut
}

type TxnEvent struct {
	Events   []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	CommitTs uint64   `protobuf:"varint,2,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"`
	StartTs  uint64   `protobuf:"varint,3,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
}

func (m *TxnEvent) Reset()         { *m = TxnEvent{} }
func (m *TxnEvent) String() string { return proto.CompactTextString(m) }
func (*TxnEvent) ProtoMessage()    {}
func (*TxnEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fb2554dfcf7f7d, []int{5}
}
func (m *TxnEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxnEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxnEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxnEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxnEvent.Merge(m, src)
}
func (m *TxnEvent) XXX_Size() int {
	return m.Size()
}
func (m *TxnEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TxnEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TxnEvent proto.InternalMessageInfo

func (m *TxnEvent) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *TxnEvent) GetCommitTs() uint64 {
	if m != nil {
		return m.CommitTs
	}
	return 0
}

func (m *TxnEvent) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

type TableInfo struct {
}

func (m *TableInfo) Reset()         { *m = TableInfo{} }
func (m *TableInfo) String() string { return proto.CompactTextString(m) }
func (*TableInfo) ProtoMessage()    {}
func (*TableInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fb2554dfcf7f7d, []int{6}
}
func (m *TableInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableInfo.Merge(m, src)
}
func (m *TableInfo) XXX_Size() int {
	return m.Size()
}
func (m *TableInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TableInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TableInfo proto.InternalMessageInfo

type EventFeed struct {
	TxnEvents    []*TxnEvent               `protobuf:"bytes,1,rep,name=txn_events,json=txnEvents,proto3" json:"txn_events,omitempty"`
	ResolvedTs   uint64                    `protobuf:"varint,2,opt,name=resolved_ts,json=resolvedTs,proto3" json:"resolved_ts,omitempty"`
	DispatcherId *heartbeatpb.DispatcherID `protobuf:"bytes,3,opt,name=dispatcher_id,json=dispatcherId,proto3" json:"dispatcher_id,omitempty"`
	Ratio        float32                   `protobuf:"fixed32,4,opt,name=ratio,proto3" json:"ratio,omitempty"`
	TableInfo    *TableInfo                `protobuf:"bytes,5,opt,name=table_info,json=tableInfo,proto3" json:"table_info,omitempty"`
}

func (m *EventFeed) Reset()         { *m = EventFeed{} }
func (m *EventFeed) String() string { return proto.CompactTextString(m) }
func (*EventFeed) ProtoMessage()    {}
func (*EventFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fb2554dfcf7f7d, []int{7}
}
func (m *EventFeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventFeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFeed.Merge(m, src)
}
func (m *EventFeed) XXX_Size() int {
	return m.Size()
}
func (m *EventFeed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFeed.DiscardUnknown(m)
}

var xxx_messageInfo_EventFeed proto.InternalMessageInfo

func (m *EventFeed) GetTxnEvents() []*TxnEvent {
	if m != nil {
		return m.TxnEvents
	}
	return nil
}

func (m *EventFeed) GetResolvedTs() uint64 {
	if m != nil {
		return m.ResolvedTs
	}
	return 0
}

func (m *EventFeed) GetDispatcherId() *heartbeatpb.DispatcherID {
	if m != nil {
		return m.DispatcherId
	}
	return nil
}

func (m *EventFeed) GetRatio() float32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (m *EventFeed) GetTableInfo() *TableInfo {
	if m != nil {
		return m.TableInfo
	}
	return nil
}

type IntegrityConfig struct {
	IntegrityCheckLevel   string `protobuf:"bytes,1,opt,name=IntegrityCheckLevel,proto3" json:"IntegrityCheckLevel,omitempty"`
	CorruptionHandleLevel string `protobuf:"bytes,2,opt,name=CorruptionHandleLevel,proto3" json:"CorruptionHandleLevel,omitempty"`
}

func (m *IntegrityConfig) Reset()         { *m = IntegrityConfig{} }
func (m *IntegrityConfig) String() string { return proto.CompactTextString(m) }
func (*IntegrityConfig) ProtoMessage()    {}
func (*IntegrityConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fb2554dfcf7f7d, []int{8}
}
func (m *IntegrityConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntegrityConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntegrityConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntegrityConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegrityConfig.Merge(m, src)
}
func (m *IntegrityConfig) XXX_Size() int {
	return m.Size()
}
func (m *IntegrityConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegrityConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IntegrityConfig proto.InternalMessageInfo

func (m *IntegrityConfig) GetIntegrityCheckLevel() string {
	if m != nil {
		return m.IntegrityCheckLevel
	}
	return ""
}

func (m *IntegrityConfig) GetCorruptionHandleLevel() string {
	if m != nil {
		return m.CorruptionHandleLevel
	}
	return ""
}

type DispatcherRegisterReq struct {
	// cluster_id is the id of the TiDB cluster that the dispatcher belongs to.
	ClusterId         uint64                    `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ChangefeedId      *heartbeatpb.ChangefeedID `protobuf:"bytes,2,opt,name=changefeed_id,json=changefeedId,proto3" json:"changefeed_id,omitempty"`
	DispatcherId      *heartbeatpb.DispatcherID `protobuf:"bytes,3,opt,name=dispatcher_id,json=dispatcherId,proto3" json:"dispatcher_id,omitempty"`
	TableSpan         *heartbeatpb.TableSpan    `protobuf:"bytes,4,opt,name=table_span,json=tableSpan,proto3" json:"table_span,omitempty"`
	StartTs           uint64                    `protobuf:"varint,5,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	ServerId          string                    `protobuf:"bytes,6,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	FilterConfig      *FilterConfig             `protobuf:"bytes,7,opt,name=filter_config,json=filterConfig,proto3" json:"filter_config,omitempty"`
	EnableSyncPoint   bool                      `protobuf:"varint,8,opt,name=enable_sync_point,json=enableSyncPoint,proto3" json:"enable_sync_point,omitempty"`
	SyncPointTs       uint64                    `protobuf:"varint,9,opt,name=sync_point_ts,json=syncPointTs,proto3" json:"sync_point_ts,omitempty"`
	SyncPointInterval uint64                    `protobuf:"varint,10,opt,name=sync_point_interval,json=syncPointInterval,proto3" json:"sync_point_interval,omitempty"`
	OnlyReuse         bool                      `protobuf:"varint,11,opt,name=only_reuse,json=onlyReuse,proto3" json:"only_reuse,omitempty"`
	BdrMode           bool                      `protobuf:"varint,12,opt,name=bdr_mode,json=bdrMode,proto3" json:"bdr_mode,omitempty"`
	Integrity         *IntegrityConfig          `protobuf:"bytes,13,opt,name=integrity,proto3" json:"integrity,omitempty"`
	Timezone          string                    `protobuf:"bytes,14,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (m *DispatcherRegisterReq) Reset()         { *m = DispatcherRegisterReq{} }
func (m *DispatcherRegisterReq) String() string { return proto.CompactTextString(m) }
func (*DispatcherRegisterReq) ProtoMessage()    {}
func (*DispatcherRegisterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fb2554dfcf7f7d, []int{9}
}
func (m *DispatcherRegisterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatcherRegisterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatcherRegisterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatcherRegisterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatcherRegisterReq.Merge(m, src)
}
func (m *DispatcherRegisterReq) XXX_Size() int {
	return m.Size()
}
func (m *DispatcherRegisterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatcherRegisterReq.DiscardUnknown(m)
}

var xxx_messageInfo_DispatcherRegisterReq proto.InternalMessageInfo

func (m *DispatcherRegisterReq) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *DispatcherRegisterReq) GetChangefeedId() *heartbeatpb.ChangefeedID {
	if m != nil {
		return m.ChangefeedId
	}
	return nil
}

func (m *DispatcherRegisterReq) GetDispatcherId() *heartbeatpb.DispatcherID {
	if m != nil {
		return m.DispatcherId
	}
	return nil
}

func (m *DispatcherRegisterReq) GetTableSpan() *heartbeatpb.TableSpan {
	if m != nil {
		return m.TableSpan
	}
	return nil
}

func (m *DispatcherRegisterReq) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *DispatcherRegisterReq) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *DispatcherRegisterReq) GetFilterConfig() *FilterConfig {
	if m != nil {
		return m.FilterConfig
	}
	return nil
}

func (m *DispatcherRegisterReq) GetEnableSyncPoint() bool {
	if m != nil {
		return m.EnableSyncPoint
	}
	return false
}

func (m *DispatcherRegisterReq) GetSyncPointTs() uint64 {
	if m != nil {
		return m.SyncPointTs
	}
	return 0
}

func (m *DispatcherRegisterReq) GetSyncPointInterval() uint64 {
	if m != nil {
		return m.SyncPointInterval
	}
	return 0
}

func (m *DispatcherRegisterReq) GetOnlyReuse() bool {
	if m != nil {
		return m.OnlyReuse
	}
	return false
}

func (m *DispatcherRegisterReq) GetBdrMode() bool {
	if m != nil {
		return m.BdrMode
	}
	return false
}

func (m *DispatcherRegisterReq) GetIntegrity() *IntegrityConfig {
	if m != nil {
		return m.Integrity
	}
	return nil
}

func (m *DispatcherRegisterReq) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

type DispatcherRemoveReq struct {
	// cluster_id is the id of the TiDB cluster that the dispatcher belongs to.
	ClusterId    uint64                    `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ChangefeedId *heartbeatpb.ChangefeedID `protobuf:"bytes,2,opt,name=changefeed_id,json=changefeedId,proto3" json:"changefeed_id,omitempty"`
	DispatcherId *heartbeatpb.DispatcherID `protobuf:"bytes,3,opt,name=dispatcher_id,json=dispatcherId,proto3" json:"dispatcher_id,omitempty"`
}

func (m *DispatcherRemoveReq) Reset()         { *m = DispatcherRemoveReq{} }
func (m *DispatcherRemoveReq) String() string { return proto.CompactTextString(m) }
func (*DispatcherRemoveReq) ProtoMessage()    {}
func (*DispatcherRemoveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fb2554dfcf7f7d, []int{10}
}
func (m *DispatcherRemoveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatcherRemoveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatcherRemoveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatcherRemoveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatcherRemoveReq.Merge(m, src)
}
func (m *DispatcherRemoveReq) XXX_Size() int {
	return m.Size()
}
func (m *DispatcherRemoveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatcherRemoveReq.DiscardUnknown(m)
}

var xxx_messageInfo_DispatcherRemoveReq proto.InternalMessageInfo

func (m *DispatcherRemoveReq) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *DispatcherRemoveReq) GetChangefeedId() *heartbeatpb.ChangefeedID {
	if m != nil {
		return m.ChangefeedId
	}
	return nil
}

func (m *DispatcherRemoveReq) GetDispatcherId() *heartbeatpb.DispatcherID {
	if m != nil {
		return m.DispatcherId
	}
	return nil
}

type DispatcherPauseReq struct {
	// cluster_id is the id of the TiDB cluster that the dispatcher belongs to.
	ClusterId    uint64                    `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ChangefeedId *heartbeatpb.ChangefeedID `protobuf:"bytes,2,opt,name=changefeed_id,json=changefeedId,proto3" json:"changefeed_id,omitempty"`
	DispatcherId *heartbeatpb.DispatcherID `protobuf:"bytes,3,opt,name=dispatcher_id,json=dispatcherId,proto3" json:"dispatcher_id,omitempty"`
}

func (m *DispatcherPauseReq) Reset()         { *m = DispatcherPauseReq{} }
func (m *DispatcherPauseReq) String() string { return proto.CompactTextString(m) }
func (*DispatcherPauseReq) ProtoMessage()    {}
func (*DispatcherPauseReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fb2554dfcf7f7d, []int{11}
}
func (m *DispatcherPauseReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatcherPauseReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatcherPauseReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatcherPauseReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatcherPauseReq.Merge(m, src)
}
func (m *DispatcherPauseReq) XXX_Size() int {
	return m.Size()
}
func (m *DispatcherPauseReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatcherPauseReq.DiscardUnknown(m)
}

var xxx_messageInfo_DispatcherPauseReq proto.InternalMessageInfo

func (m *DispatcherPauseReq) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *DispatcherPauseReq) GetChangefeedId() *heartbeatpb.ChangefeedID {
	if m != nil {
		return m.ChangefeedId
	}
	return nil
}

func (m *DispatcherPauseReq) GetDispatcherId() *heartbeatpb.DispatcherID {
	if m != nil {
		return m.DispatcherId
	}
	return nil
}

type DispatcherResumeReq struct {
	// cluster_id is the id of the TiDB cluster that the dispatcher belongs to.
	ClusterId    uint64                    `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ChangefeedId *heartbeatpb.ChangefeedID `protobuf:"bytes,2,opt,name=changefeed_id,json=changefeedId,proto3" json:"changefeed_id,omitempty"`
	DispatcherId *heartbeatpb.DispatcherID `protobuf:"bytes,3,opt,name=dispatcher_id,json=dispatcherId,proto3" json:"dispatcher_id,omitempty"`
}

func (m *DispatcherResumeReq) Reset()         { *m = DispatcherResumeReq{} }
func (m *DispatcherResumeReq) String() string { return proto.CompactTextString(m) }
func (*DispatcherResumeReq) ProtoMessage()    {}
func (*DispatcherResumeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fb2554dfcf7f7d, []int{12}
}
func (m *DispatcherResumeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatcherResumeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatcherResumeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatcherResumeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatcherResumeReq.Merge(m, src)
}
func (m *DispatcherResumeReq) XXX_Size() int {
	return m.Size()
}
func (m *DispatcherResumeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatcherResumeReq.DiscardUnknown(m)
}

var xxx_messageInfo_DispatcherResumeReq proto.InternalMessageInfo

func (m *DispatcherResumeReq) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *DispatcherResumeReq) GetChangefeedId() *heartbeatpb.ChangefeedID {
	if m != nil {
		return m.ChangefeedId
	}
	return nil
}

func (m *DispatcherResumeReq) GetDispatcherId() *heartbeatpb.DispatcherID {
	if m != nil {
		return m.DispatcherId
	}
	return nil
}

type DispatcherResetReq struct {
	// cluster_id is the id of the TiDB cluster that the dispatcher belongs to.
	ClusterId    uint64                    `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ChangefeedId *heartbeatpb.ChangefeedID `protobuf:"bytes,2,opt,name=changefeed_id,json=changefeedId,proto3" json:"changefeed_id,omitempty"`
	DispatcherId *heartbeatpb.DispatcherID `protobuf:"bytes,3,opt,name=dispatcher_id,json=dispatcherId,proto3" json:"dispatcher_id,omitempty"`
	StartTs      uint64                    `protobuf:"varint,4,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	Epoch        uint64                    `protobuf:"varint,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *DispatcherResetReq) Reset()         { *m = DispatcherResetReq{} }
func (m *DispatcherResetReq) String() string { return proto.CompactTextString(m) }
func (*DispatcherResetReq) ProtoMessage()    {}
func (*DispatcherResetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fb2554dfcf7f7d, []int{13}
}
func (m *DispatcherResetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatcherResetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatcherResetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatcherResetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatcherResetReq.Merge(m, src)
}
func (m *DispatcherResetReq) XXX_Size() int {
	return m.Size()
}
func (m *DispatcherResetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatcherResetReq.DiscardUnknown(m)
}

var xxx_messageInfo_DispatcherResetReq proto.InternalMessageInfo

func (m *DispatcherResetReq) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *DispatcherResetReq) GetChangefeedId() *heartbeatpb.ChangefeedID {
	if m != nil {
		return m.ChangefeedId
	}
	return nil
}

func (m *DispatcherResetReq) GetDispatcherId() *heartbeatpb.DispatcherID {
	if m != nil {
		return m.DispatcherId
	}
	return nil
}

func (m *DispatcherResetReq) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *DispatcherResetReq) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func init() {
	proto.RegisterEnum("eventpb.OpType", OpType_name, OpType_value)
	proto.RegisterType((*EventFilterRule)(nil), "eventpb.EventFilterRule")
	proto.RegisterType((*InnerFilterConfig)(nil), "eventpb.InnerFilterConfig")
	proto.RegisterType((*FilterConfig)(nil), "eventpb.FilterConfig")
	proto.RegisterType((*ResolvedTs)(nil), "eventpb.ResolvedTs")
	proto.RegisterType((*Event)(nil), "eventpb.Event")
	proto.RegisterType((*TxnEvent)(nil), "eventpb.TxnEvent")
	proto.RegisterType((*TableInfo)(nil), "eventpb.TableInfo")
	proto.RegisterType((*EventFeed)(nil), "eventpb.EventFeed")
	proto.RegisterType((*IntegrityConfig)(nil), "eventpb.IntegrityConfig")
	proto.RegisterType((*DispatcherRegisterReq)(nil), "eventpb.DispatcherRegisterReq")
	proto.RegisterType((*DispatcherRemoveReq)(nil), "eventpb.DispatcherRemoveReq")
	proto.RegisterType((*DispatcherPauseReq)(nil), "eventpb.DispatcherPauseReq")
	proto.RegisterType((*DispatcherResumeReq)(nil), "eventpb.DispatcherResumeReq")
	proto.RegisterType((*DispatcherResetReq)(nil), "eventpb.DispatcherResetReq")
}

func init() { proto.RegisterFile("eventpb/event.proto", fileDescriptor_d7fb2554dfcf7f7d) }

var fileDescriptor_d7fb2554dfcf7f7d = []byte{
	// 1064 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4d, 0x6f, 0x23, 0x45,
	0x13, 0xce, 0x38, 0x1f, 0xf6, 0x94, 0xed, 0x7c, 0x74, 0x36, 0xaf, 0x66, 0x77, 0x5f, 0x4c, 0x18,
	0xa1, 0x95, 0x59, 0x09, 0x67, 0x31, 0x5f, 0xd2, 0x0a, 0xed, 0x81, 0x64, 0x11, 0x96, 0x80, 0x8d,
	0x3a, 0x86, 0x03, 0x97, 0xd1, 0x78, 0xa6, 0x6c, 0x0f, 0x3b, 0xee, 0x9e, 0x4c, 0xf7, 0x78, 0x63,
	0x7e, 0x05, 0x27, 0x4e, 0xfc, 0x0b, 0xf8, 0x11, 0x1c, 0xf7, 0xc8, 0x0d, 0x94, 0x20, 0x71, 0xe4,
	0x2f, 0xa0, 0xee, 0x1e, 0x8f, 0x67, 0xb2, 0x81, 0x0b, 0x17, 0x72, 0x72, 0x57, 0xd5, 0x53, 0xdd,
	0x4f, 0x3f, 0x55, 0x5d, 0x1e, 0xd8, 0xc7, 0x39, 0x32, 0x99, 0x8c, 0x8e, 0xf4, 0x6f, 0x2f, 0x49,
	0xb9, 0xe4, 0xa4, 0x9e, 0x3b, 0xef, 0xdd, 0x9f, 0xa2, 0x9f, 0xca, 0x11, 0xfa, 0x0a, 0x51, 0xac,
	0x0d, 0xca, 0xfd, 0xb5, 0x06, 0x3b, 0x4f, 0x15, 0xf0, 0x93, 0x28, 0x96, 0x98, 0xd2, 0x2c, 0x46,
	0xe2, 0x40, 0x7d, 0xe6, 0xcb, 0x60, 0x8a, 0xa9, 0x63, 0x1d, 0xae, 0x77, 0x6d, 0xba, 0x34, 0xc9,
	0x1b, 0xd0, 0x8a, 0x26, 0x8c, 0xa7, 0xe8, 0xe9, 0xcd, 0x9d, 0x9a, 0x0e, 0x37, 0x8d, 0x4f, 0x6f,
	0x43, 0x5e, 0x03, 0xc8, 0x21, 0xe2, 0x3c, 0x76, 0xd6, 0x35, 0xc0, 0x36, 0x9e, 0xb3, 0xf3, 0x98,
	0x7c, 0x08, 0x4e, 0x1e, 0x8e, 0x98, 0xc0, 0x54, 0x7a, 0x73, 0x3f, 0xce, 0xd0, 0xc3, 0x8b, 0x24,
	0x75, 0x36, 0x0e, 0xad, 0xae, 0x4d, 0x0f, 0x4c, 0x7c, 0xa0, 0xc3, 0x5f, 0xa9, 0xe8, 0xd3, 0x8b,
	0x24, 0x25, 0x4f, 0xe0, 0xff, 0x79, 0x62, 0x96, 0x84, 0xbe, 0x44, 0x8f, 0xe1, 0x8b, 0x72, 0xf2,
	0xa6, 0x4e, 0xce, 0x37, 0xff, 0x52, 0x43, 0xbe, 0xc0, 0x17, 0xff, 0x90, 0xcf, 0xe3, 0xb0, 0x9c,
	0xbf, 0xf5, 0x6a, 0xfe, 0xb3, 0x38, 0x5c, 0xe5, 0xaf, 0x88, 0x87, 0x18, 0xa3, 0xc4, 0x72, 0x6e,
	0xbd, 0x4c, 0xfc, 0x44, 0x87, 0x8b, 0x44, 0xf7, 0x7b, 0x0b, 0xf6, 0x06, 0x8c, 0x61, 0x6a, 0x14,
	0x3e, 0xe6, 0x6c, 0x1c, 0x4d, 0xc8, 0x1d, 0xd8, 0x4c, 0xb3, 0x18, 0x45, 0xae, 0xb0, 0x31, 0xc8,
	0xdb, 0xb0, 0x9f, 0x1f, 0x22, 0x2f, 0x98, 0x27, 0xa4, 0x9f, 0x4a, 0x4f, 0x0a, 0x2d, 0xf3, 0x06,
	0xdd, 0x35, 0xa1, 0xe1, 0x05, 0x3b, 0x53, 0x81, 0xa1, 0x20, 0x1f, 0x41, 0xab, 0x54, 0x3b, 0xa1,
	0xd5, 0x6e, 0xf6, 0x9d, 0x5e, 0x5e, 0xf9, 0xde, 0xb5, 0xc2, 0xd2, 0x0a, 0xda, 0xfd, 0xc1, 0x82,
	0x56, 0x85, 0xd3, 0x9b, 0xd0, 0x0e, 0x7c, 0x81, 0x67, 0xc8, 0x44, 0x24, 0xa3, 0x39, 0x3a, 0xd6,
	0xa1, 0xd5, 0x6d, 0xd0, 0xaa, 0x93, 0x3c, 0x80, 0xed, 0x31, 0x4f, 0x03, 0xa4, 0x98, 0xc4, 0x51,
	0xe0, 0x4b, 0x74, 0x6a, 0x1a, 0x76, 0xcd, 0x4b, 0x9e, 0x40, 0x6b, 0x5c, 0xda, 0xdd, 0x59, 0x3f,
	0xb4, 0xba, 0xcd, 0xfe, 0xbd, 0x82, 0xdc, 0x2b, 0x9a, 0xd0, 0x0a, 0xde, 0x6d, 0x01, 0x50, 0x14,
	0x3c, 0x9e, 0x63, 0x38, 0x14, 0x6e, 0x06, 0x9b, 0xa6, 0xbf, 0x76, 0x61, 0xfd, 0x39, 0x2e, 0x34,
	0xb5, 0x16, 0x55, 0x4b, 0x25, 0xa5, 0xae, 0x85, 0xe6, 0xd1, 0xa2, 0xc6, 0x20, 0xf7, 0xa0, 0xb1,
	0xac, 0x9f, 0x3e, 0xba, 0x45, 0x0b, 0x9b, 0x74, 0xa1, 0xce, 0x13, 0x4f, 0x2e, 0x12, 0xd4, 0x3d,
	0xb7, 0xdd, 0xdf, 0x29, 0x58, 0x3d, 0x4b, 0x86, 0x8b, 0x04, 0xe9, 0x16, 0xd7, 0xbf, 0xee, 0x37,
	0xd0, 0x18, 0x5e, 0x30, 0x73, 0xf2, 0x03, 0xd8, 0xd2, 0x28, 0x53, 0xb3, 0x66, 0x7f, 0xbb, 0xaa,
	0x33, 0xcd, 0xa3, 0xe4, 0x3e, 0xd8, 0x01, 0x9f, 0xcd, 0xa2, 0xbc, 0x74, 0x56, 0x77, 0x83, 0x36,
	0x8c, 0x63, 0x28, 0xc8, 0x5d, 0x68, 0x14, 0x65, 0x5d, 0xd7, 0xb1, 0xba, 0x30, 0xd5, 0x74, 0x9b,
	0x60, 0x0f, 0xfd, 0x51, 0x8c, 0x03, 0x36, 0xe6, 0xee, 0x1f, 0x16, 0xd8, 0xa6, 0x5a, 0x88, 0x21,
	0x79, 0x04, 0xa0, 0x1a, 0xa2, 0x72, 0xfc, 0x5e, 0x71, 0xfc, 0x92, 0x21, 0xb5, 0x65, 0xbe, 0x12,
	0xe4, 0x75, 0x68, 0xa6, 0xb9, 0x7a, 0x2b, 0x1a, 0x90, 0x16, 0x82, 0x92, 0x27, 0xd0, 0x0e, 0x23,
	0x91, 0x98, 0x87, 0xed, 0x45, 0x61, 0x5e, 0x9f, 0xbb, 0xbd, 0xd2, 0xb4, 0xe8, 0x9d, 0x14, 0x88,
	0xc1, 0x09, 0x6d, 0xad, 0xf0, 0x83, 0x50, 0x37, 0xb0, 0x2f, 0x23, 0xae, 0x15, 0xac, 0x51, 0x63,
	0x90, 0x77, 0x00, 0xa4, 0xba, 0x83, 0x17, 0xb1, 0x31, 0xd7, 0x6f, 0xb2, 0xd9, 0x27, 0x2b, 0xa2,
	0xcb, 0xeb, 0x51, 0x5b, 0x16, 0x37, 0x5d, 0xc0, 0xce, 0x80, 0x49, 0x9c, 0xa4, 0x91, 0x5c, 0xe4,
	0x8d, 0xf8, 0x08, 0xf6, 0x57, 0xae, 0x29, 0x06, 0xcf, 0x3f, 0xc3, 0x39, 0xc6, 0xba, 0xe6, 0x36,
	0xbd, 0x29, 0x44, 0xde, 0x83, 0x83, 0x63, 0x9e, 0xa6, 0x59, 0x22, 0x23, 0xce, 0x3e, 0xf5, 0x59,
	0x18, 0xa3, 0xc9, 0xa9, 0x99, 0xa7, 0x79, 0x63, 0xd0, 0xfd, 0x73, 0x03, 0x0e, 0x56, 0x57, 0xa4,
	0x38, 0x89, 0x84, 0x7a, 0x2a, 0x78, 0xae, 0xa6, 0x58, 0x10, 0x67, 0xca, 0x52, 0xd2, 0x58, 0x5a,
	0x3d, 0x3b, 0xf7, 0x0c, 0x42, 0x25, 0x5e, 0x30, 0xf5, 0xd9, 0x04, 0xc7, 0x88, 0xa1, 0x42, 0xd4,
	0x6e, 0x10, 0xef, 0xb8, 0x40, 0x28, 0xf1, 0x56, 0x78, 0x93, 0xff, 0xaf, 0xc4, 0x7f, 0x7f, 0x29,
	0xb3, 0x48, 0x7c, 0xa6, 0x2b, 0xd0, 0xec, 0xff, 0xaf, 0x92, 0xac, 0xa5, 0x3e, 0x4b, 0x7c, 0x96,
	0x4b, 0xad, 0x96, 0x95, 0xe6, 0xdb, 0xac, 0x34, 0x9f, 0x6a, 0x5a, 0x81, 0xe9, 0xdc, 0xb0, 0x31,
	0xb3, 0xb0, 0x61, 0x1c, 0x83, 0x90, 0x3c, 0x86, 0xb6, 0x79, 0x9a, 0x5e, 0x60, 0xde, 0x72, 0x5d,
	0x9f, 0x78, 0x50, 0x14, 0xf6, 0xef, 0x9f, 0x31, 0x79, 0x08, 0x7b, 0xc8, 0x0c, 0xd7, 0x05, 0x0b,
	0xbc, 0x84, 0x47, 0x4c, 0x3a, 0x0d, 0x3d, 0x31, 0x76, 0x4c, 0xe0, 0x6c, 0xc1, 0x82, 0x53, 0xe5,
	0x26, 0x2e, 0xb4, 0x57, 0x20, 0x45, 0xd2, 0xd6, 0x24, 0x9b, 0x62, 0x89, 0x18, 0x0a, 0xd2, 0x83,
	0xfd, 0x12, 0x26, 0x62, 0x12, 0xd3, 0xb9, 0x1f, 0x3b, 0xa0, 0x91, 0x7b, 0x05, 0x72, 0x90, 0x07,
	0x54, 0x25, 0x39, 0x8b, 0x17, 0x5e, 0x8a, 0x99, 0x40, 0xa7, 0xa9, 0x0f, 0xb6, 0x95, 0x87, 0x2a,
	0x87, 0x92, 0x64, 0x14, 0xa6, 0xde, 0x8c, 0x87, 0xe8, 0xb4, 0x74, 0xb0, 0x3e, 0x0a, 0xd3, 0xcf,
	0x79, 0x88, 0xe4, 0x03, 0xb0, 0xa3, 0x65, 0xab, 0x39, 0x6d, 0x7d, 0x63, 0xa7, 0x34, 0xbd, 0x2a,
	0x2d, 0x4b, 0x57, 0x50, 0x35, 0x79, 0x64, 0x34, 0xc3, 0x6f, 0x39, 0x43, 0x67, 0xdb, 0x28, 0xb9,
	0xb4, 0xdd, 0x9f, 0x2c, 0xd8, 0x2f, 0x77, 0xdc, 0x8c, 0xcf, 0xf1, 0xbf, 0xdf, 0x6f, 0xee, 0x8f,
	0x16, 0x90, 0x55, 0xf8, 0xd4, 0xcf, 0xc4, 0x6d, 0x60, 0x7d, 0x5d, 0x6c, 0x91, 0xcd, 0x6e, 0x03,
	0xed, 0xdf, 0x2b, 0x62, 0x53, 0x14, 0x28, 0x6f, 0xc1, 0x48, 0x2a, 0xcf, 0x96, 0x8d, 0xea, 0x6c,
	0xb9, 0x03, 0x9b, 0x98, 0xf0, 0x60, 0x9a, 0xcf, 0x1c, 0x63, 0x3c, 0x7c, 0x0b, 0xb6, 0xcc, 0x9f,
	0x2d, 0x69, 0x83, 0x6d, 0x56, 0xa7, 0x99, 0xdc, 0x5d, 0x23, 0xbb, 0xd0, 0x32, 0xa6, 0xf9, 0x92,
	0xda, 0xb5, 0x3e, 0x7e, 0xfc, 0xf3, 0x65, 0xc7, 0x7a, 0x79, 0xd9, 0xb1, 0x7e, 0xbb, 0xec, 0x58,
	0xdf, 0x5d, 0x75, 0xd6, 0x5e, 0x5e, 0x75, 0xd6, 0x7e, 0xb9, 0xea, 0xac, 0x7d, 0x7d, 0x38, 0x89,
	0xe4, 0x34, 0x1b, 0xf5, 0x02, 0x3e, 0x3b, 0x4a, 0x22, 0x36, 0x09, 0xfc, 0xe4, 0x48, 0x46, 0x41,
	0x18, 0x1c, 0xe5, 0x0f, 0x75, 0xb4, 0xa5, 0xbf, 0x73, 0xdf, 0xfd, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0x74, 0x9e, 0x41, 0x11, 0x24, 0x0b, 0x00, 0x00,
}

func (m *EventFilterRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFilterRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventFilterRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IgnoreDeleteValueExpr) > 0 {
		i -= len(m.IgnoreDeleteValueExpr)
		copy(dAtA[i:], m.IgnoreDeleteValueExpr)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.IgnoreDeleteValueExpr)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.IgnoreUpdateOldValueExpr) > 0 {
		i -= len(m.IgnoreUpdateOldValueExpr)
		copy(dAtA[i:], m.IgnoreUpdateOldValueExpr)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.IgnoreUpdateOldValueExpr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IgnoreUpdateNewValueExpr) > 0 {
		i -= len(m.IgnoreUpdateNewValueExpr)
		copy(dAtA[i:], m.IgnoreUpdateNewValueExpr)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.IgnoreUpdateNewValueExpr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IgnoreInsertValueExpr) > 0 {
		i -= len(m.IgnoreInsertValueExpr)
		copy(dAtA[i:], m.IgnoreInsertValueExpr)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.IgnoreInsertValueExpr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IgnoreSql) > 0 {
		for iNdEx := len(m.IgnoreSql) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IgnoreSql[iNdEx])
			copy(dAtA[i:], m.IgnoreSql[iNdEx])
			i = encodeVarintEvent(dAtA, i, uint64(len(m.IgnoreSql[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.IgnoreEvent) > 0 {
		for iNdEx := len(m.IgnoreEvent) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IgnoreEvent[iNdEx])
			copy(dAtA[i:], m.IgnoreEvent[iNdEx])
			i = encodeVarintEvent(dAtA, i, uint64(len(m.IgnoreEvent[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Matcher) > 0 {
		for iNdEx := len(m.Matcher) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Matcher[iNdEx])
			copy(dAtA[i:], m.Matcher[iNdEx])
			i = encodeVarintEvent(dAtA, i, uint64(len(m.Matcher[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InnerFilterConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InnerFilterConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InnerFilterConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventFilters) > 0 {
		for iNdEx := len(m.EventFilters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EventFilters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.IgnoreTxnStartTs) > 0 {
		dAtA2 := make([]byte, len(m.IgnoreTxnStartTs)*10)
		var j1 int
		for _, num := range m.IgnoreTxnStartTs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEvent(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Rules[iNdEx])
			copy(dAtA[i:], m.Rules[iNdEx])
			i = encodeVarintEvent(dAtA, i, uint64(len(m.Rules[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FilterConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FilterConfig != nil {
		{
			size, err := m.FilterConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ForceReplicate {
		i--
		if m.ForceReplicate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.CaseSensitive {
		i--
		if m.CaseSensitive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResolvedTs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolvedTs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolvedTs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OpType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.OpType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OldValue) > 0 {
		i -= len(m.OldValue)
		copy(dAtA[i:], m.OldValue)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.OldValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxnEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxnEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxnEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartTs != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x18
	}
	if m.CommitTs != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CommitTs))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TableInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventFeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventFeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TableInfo != nil {
		{
			size, err := m.TableInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Ratio != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Ratio))))
		i--
		dAtA[i] = 0x25
	}
	if m.DispatcherId != nil {
		{
			size, err := m.DispatcherId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ResolvedTs != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ResolvedTs))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxnEvents) > 0 {
		for iNdEx := len(m.TxnEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxnEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IntegrityConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntegrityConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntegrityConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CorruptionHandleLevel) > 0 {
		i -= len(m.CorruptionHandleLevel)
		copy(dAtA[i:], m.CorruptionHandleLevel)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CorruptionHandleLevel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IntegrityCheckLevel) > 0 {
		i -= len(m.IntegrityCheckLevel)
		copy(dAtA[i:], m.IntegrityCheckLevel)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.IntegrityCheckLevel)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DispatcherRegisterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatcherRegisterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatcherRegisterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Timezone) > 0 {
		i -= len(m.Timezone)
		copy(dAtA[i:], m.Timezone)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Timezone)))
		i--
		dAtA[i] = 0x72
	}
	if m.Integrity != nil {
		{
			size, err := m.Integrity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.BdrMode {
		i--
		if m.BdrMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.OnlyReuse {
		i--
		if m.OnlyReuse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.SyncPointInterval != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SyncPointInterval))
		i--
		dAtA[i] = 0x50
	}
	if m.SyncPointTs != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.SyncPointTs))
		i--
		dAtA[i] = 0x48
	}
	if m.EnableSyncPoint {
		i--
		if m.EnableSyncPoint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.FilterConfig != nil {
		{
			size, err := m.FilterConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ServerId) > 0 {
		i -= len(m.ServerId)
		copy(dAtA[i:], m.ServerId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ServerId)))
		i--
		dAtA[i] = 0x32
	}
	if m.StartTs != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x28
	}
	if m.TableSpan != nil {
		{
			size, err := m.TableSpan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DispatcherId != nil {
		{
			size, err := m.DispatcherId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ChangefeedId != nil {
		{
			size, err := m.ChangefeedId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ClusterId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ClusterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DispatcherRemoveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatcherRemoveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatcherRemoveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DispatcherId != nil {
		{
			size, err := m.DispatcherId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ChangefeedId != nil {
		{
			size, err := m.ChangefeedId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ClusterId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ClusterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DispatcherPauseReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatcherPauseReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatcherPauseReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DispatcherId != nil {
		{
			size, err := m.DispatcherId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ChangefeedId != nil {
		{
			size, err := m.ChangefeedId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ClusterId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ClusterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DispatcherResumeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatcherResumeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatcherResumeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DispatcherId != nil {
		{
			size, err := m.DispatcherId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ChangefeedId != nil {
		{
			size, err := m.ChangefeedId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ClusterId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ClusterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DispatcherResetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatcherResetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatcherResetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTs != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x20
	}
	if m.DispatcherId != nil {
		{
			size, err := m.DispatcherId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ChangefeedId != nil {
		{
			size, err := m.ChangefeedId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ClusterId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ClusterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventFilterRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Matcher) > 0 {
		for _, s := range m.Matcher {
			l = len(s)
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if len(m.IgnoreEvent) > 0 {
		for _, s := range m.IgnoreEvent {
			l = len(s)
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if len(m.IgnoreSql) > 0 {
		for _, s := range m.IgnoreSql {
			l = len(s)
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = len(m.IgnoreInsertValueExpr)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.IgnoreUpdateNewValueExpr)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.IgnoreUpdateOldValueExpr)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.IgnoreDeleteValueExpr)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *InnerFilterConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, s := range m.Rules {
			l = len(s)
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if len(m.IgnoreTxnStartTs) > 0 {
		l = 0
		for _, e := range m.IgnoreTxnStartTs {
			l += sovEvent(uint64(e))
		}
		n += 1 + sovEvent(uint64(l)) + l
	}
	if len(m.EventFilters) > 0 {
		for _, e := range m.EventFilters {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *FilterConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaseSensitive {
		n += 2
	}
	if m.ForceReplicate {
		n += 2
	}
	if m.FilterConfig != nil {
		l = m.FilterConfig.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *ResolvedTs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.OldValue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.OpType != 0 {
		n += 1 + sovEvent(uint64(m.OpType))
	}
	return n
}

func (m *TxnEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if m.CommitTs != 0 {
		n += 1 + sovEvent(uint64(m.CommitTs))
	}
	if m.StartTs != 0 {
		n += 1 + sovEvent(uint64(m.StartTs))
	}
	return n
}

func (m *TableInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventFeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TxnEvents) > 0 {
		for _, e := range m.TxnEvents {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if m.ResolvedTs != 0 {
		n += 1 + sovEvent(uint64(m.ResolvedTs))
	}
	if m.DispatcherId != nil {
		l = m.DispatcherId.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Ratio != 0 {
		n += 5
	}
	if m.TableInfo != nil {
		l = m.TableInfo.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *IntegrityConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IntegrityCheckLevel)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CorruptionHandleLevel)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *DispatcherRegisterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovEvent(uint64(m.ClusterId))
	}
	if m.ChangefeedId != nil {
		l = m.ChangefeedId.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.DispatcherId != nil {
		l = m.DispatcherId.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.TableSpan != nil {
		l = m.TableSpan.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.StartTs != 0 {
		n += 1 + sovEvent(uint64(m.StartTs))
	}
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.FilterConfig != nil {
		l = m.FilterConfig.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.EnableSyncPoint {
		n += 2
	}
	if m.SyncPointTs != 0 {
		n += 1 + sovEvent(uint64(m.SyncPointTs))
	}
	if m.SyncPointInterval != 0 {
		n += 1 + sovEvent(uint64(m.SyncPointInterval))
	}
	if m.OnlyReuse {
		n += 2
	}
	if m.BdrMode {
		n += 2
	}
	if m.Integrity != nil {
		l = m.Integrity.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Timezone)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *DispatcherRemoveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovEvent(uint64(m.ClusterId))
	}
	if m.ChangefeedId != nil {
		l = m.ChangefeedId.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.DispatcherId != nil {
		l = m.DispatcherId.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *DispatcherPauseReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovEvent(uint64(m.ClusterId))
	}
	if m.ChangefeedId != nil {
		l = m.ChangefeedId.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.DispatcherId != nil {
		l = m.DispatcherId.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *DispatcherResumeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovEvent(uint64(m.ClusterId))
	}
	if m.ChangefeedId != nil {
		l = m.ChangefeedId.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.DispatcherId != nil {
		l = m.DispatcherId.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *DispatcherResetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovEvent(uint64(m.ClusterId))
	}
	if m.ChangefeedId != nil {
		l = m.ChangefeedId.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.DispatcherId != nil {
		l = m.DispatcherId.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.StartTs != 0 {
		n += 1 + sovEvent(uint64(m.StartTs))
	}
	if m.Epoch != 0 {
		n += 1 + sovEvent(uint64(m.Epoch))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventFilterRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFilterRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFilterRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matcher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matcher = append(m.Matcher, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreEvent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgnoreEvent = append(m.IgnoreEvent, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreSql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgnoreSql = append(m.IgnoreSql, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreInsertValueExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgnoreInsertValueExpr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreUpdateNewValueExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgnoreUpdateNewValueExpr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreUpdateOldValueExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgnoreUpdateOldValueExpr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreDeleteValueExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgnoreDeleteValueExpr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InnerFilterConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerFilterConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerFilterConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IgnoreTxnStartTs = append(m.IgnoreTxnStartTs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IgnoreTxnStartTs) == 0 {
					m.IgnoreTxnStartTs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IgnoreTxnStartTs = append(m.IgnoreTxnStartTs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreTxnStartTs", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventFilters = append(m.EventFilters, &EventFilterRule{})
			if err := m.EventFilters[len(m.EventFilters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilterConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseSensitive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CaseSensitive = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceReplicate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceReplicate = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FilterConfig == nil {
				m.FilterConfig = &InnerFilterConfig{}
			}
			if err := m.FilterConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolvedTs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolvedTs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolvedTs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldValue = append(m.OldValue[:0], dAtA[iNdEx:postIndex]...)
			if m.OldValue == nil {
				m.OldValue = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= OpType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxnEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxnEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxnEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTs", wireType)
			}
			m.CommitTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxnEvents = append(m.TxnEvents, &TxnEvent{})
			if err := m.TxnEvents[len(m.TxnEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedTs", wireType)
			}
			m.ResolvedTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolvedTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispatcherId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DispatcherId == nil {
				m.DispatcherId = &heartbeatpb.DispatcherID{}
			}
			if err := m.DispatcherId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Ratio = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TableInfo == nil {
				m.TableInfo = &TableInfo{}
			}
			if err := m.TableInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntegrityConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntegrityConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntegrityConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegrityCheckLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntegrityCheckLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorruptionHandleLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorruptionHandleLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatcherRegisterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatcherRegisterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatcherRegisterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedId == nil {
				m.ChangefeedId = &heartbeatpb.ChangefeedID{}
			}
			if err := m.ChangefeedId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispatcherId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DispatcherId == nil {
				m.DispatcherId = &heartbeatpb.DispatcherID{}
			}
			if err := m.DispatcherId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableSpan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TableSpan == nil {
				m.TableSpan = &heartbeatpb.TableSpan{}
			}
			if err := m.TableSpan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FilterConfig == nil {
				m.FilterConfig = &FilterConfig{}
			}
			if err := m.FilterConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSyncPoint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableSyncPoint = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncPointTs", wireType)
			}
			m.SyncPointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncPointTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncPointInterval", wireType)
			}
			m.SyncPointInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncPointInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyReuse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlyReuse = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BdrMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BdrMode = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Integrity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Integrity == nil {
				m.Integrity = &IntegrityConfig{}
			}
			if err := m.Integrity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatcherRemoveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatcherRemoveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatcherRemoveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedId == nil {
				m.ChangefeedId = &heartbeatpb.ChangefeedID{}
			}
			if err := m.ChangefeedId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispatcherId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DispatcherId == nil {
				m.DispatcherId = &heartbeatpb.DispatcherID{}
			}
			if err := m.DispatcherId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatcherPauseReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatcherPauseReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatcherPauseReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedId == nil {
				m.ChangefeedId = &heartbeatpb.ChangefeedID{}
			}
			if err := m.ChangefeedId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispatcherId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DispatcherId == nil {
				m.DispatcherId = &heartbeatpb.DispatcherID{}
			}
			if err := m.DispatcherId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatcherResumeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatcherResumeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatcherResumeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedId == nil {
				m.ChangefeedId = &heartbeatpb.ChangefeedID{}
			}
			if err := m.ChangefeedId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispatcherId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DispatcherId == nil {
				m.DispatcherId = &heartbeatpb.DispatcherID{}
			}
			if err := m.DispatcherId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatcherResetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatcherResetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatcherResetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedId == nil {
				m.ChangefeedId = &heartbeatpb.ChangefeedID{}
			}
			if err := m.ChangefeedId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispatcherId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DispatcherId == nil {
				m.DispatcherId = &heartbeatpb.DispatcherID{}
			}
			if err := m.DispatcherId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
